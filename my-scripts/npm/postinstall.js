"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const constants_1 = require("../build-env/misc/constants");
const installedMark = '## kendryte environment hook ## Do Not Edit This File';
const installedMarkEnd = '## kendryte environment hook end ## Do Not Edit This File';
const passingSimpleEnvironments = [
    'HTTPS_PROXY',
    'ALL_PROXY',
    'npm_config_arch',
    'npm_config_disturl',
    'npm_config_runtime',
    'ORIGINAL_HOME',
    'ORIGINAL_PATH',
].map(exportSimpleEnvironment);
const passingPathEnvironments = [
    'VSCODE_ROOT',
    'RELEASE_ROOT',
    'ARCH_RELEASE_ROOT',
    'FAKE_HOME',
    'HOME',
    'NODEJS_INSTALL',
    'NODEJS_BIN',
    'NODEJS',
    'YARN_FOLDER',
    'PREFIX',
    'YARN_CACHE_FOLDER',
    'PRIVATE_BINS',
    'TMP',
    'TEMP',
    'npm_config_cache',
].map(constants_1.isWin ? exportCrossPlatformEnvironment : exportSimpleEnvironment);
let passingPath;
if (constants_1.isWin) {
    const mergingPath = process.env.Path;
    const npmContent = `#!/bin/sh
"$NODEJS" "$VSCODE_ROOT/my-scripts/build-env/mock-npm.js"
`.trim();
    passingPath = [
        'unset path',
        'unset Path',
        'echo -e ' + JSON.stringify(npmContent) + ' \\"\\$@\\" > "${PRIVATE_BINS}/npm"',
        'export PATH=' + JSON.stringify(parsePathVariable(mergingPath) + ':$PATH'),
    ];
}
else {
    passingPath = [exportSimpleEnvironment('PATH')];
}
const hooksDir = path_1.resolve(constants_1.VSCODE_ROOT, '.git', 'hooks');
process.chdir(hooksDir);
fs_1.readdirSync(hooksDir).forEach((item) => {
    if (item.endsWith('.sample')) {
        return;
    }
    const data = fs_1.readFileSync(path_1.resolve(hooksDir, item), 'utf8');
    const lines = data.split('\n');
    const startMark = lines.indexOf(installedMark);
    const endMark = lines.lastIndexOf(installedMarkEnd);
    let start = 1, length = 0;
    if (startMark !== -1 && endMark > startMark) {
        start = startMark;
        length = endMark - startMark + 1;
    }
    lines.splice(start, length, installedMark, ...passingSimpleEnvironments, ...passingPathEnvironments, ...passingPath, installedMarkEnd);
    fs_1.writeFileSync(item, lines.join('\n'), 'utf8');
});
function exportSimpleEnvironment(envName) {
    return `export ${envName}=${JSON.stringify(process.env[envName])}`;
}
function exportCrossPlatformEnvironment(envName) {
    const paths = parsePathVariable(process.env[envName]);
    return `export ${envName}=${JSON.stringify(paths)}`;
}
function parsePathVariable(value) {
    return value.split(';').filter(e => e.length > 0).map((path) => {
        path = path_1.normalize(path);
        path = path.replace(/^([a-z]):\\/i, (m0, drive) => {
            return '/' + drive.toLowerCase() + '/';
        });
        path = path.replace(/\\/g, '/');
        return path;
    }).join(':');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zdGluc3RhbGwuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbIm5wbS9wb3N0aW5zdGFsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJCQUE4RDtBQUM5RCwrQkFBMEM7QUFDMUMsMkRBQWlFO0FBRWpFLE1BQU0sYUFBYSxHQUFHLHVEQUF1RCxDQUFDO0FBQzlFLE1BQU0sZ0JBQWdCLEdBQUcsMkRBQTJELENBQUM7QUFDckYsTUFBTSx5QkFBeUIsR0FBRztJQUNqQyxhQUFhO0lBQ2IsV0FBVztJQUNYLGlCQUFpQjtJQUNqQixvQkFBb0I7SUFDcEIsb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixlQUFlO0NBQ2YsQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUMvQixNQUFNLHVCQUF1QixHQUFHO0lBQy9CLGFBQWE7SUFDYixjQUFjO0lBQ2QsbUJBQW1CO0lBQ25CLFdBQVc7SUFDWCxNQUFNO0lBQ04sZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixRQUFRO0lBQ1IsYUFBYTtJQUNiLFFBQVE7SUFDUixtQkFBbUI7SUFDbkIsY0FBYztJQUNkLEtBQUs7SUFDTCxNQUFNO0lBQ04sa0JBQWtCO0NBQ2xCLENBQUMsR0FBRyxDQUFDLGlCQUFLLENBQUEsQ0FBQyxDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ3ZFLElBQUksV0FBcUIsQ0FBQztBQUMxQixJQUFJLGlCQUFLLEVBQUU7SUFDVixNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztJQUNyQyxNQUFNLFVBQVUsR0FBRzs7Q0FFbkIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNSLFdBQVcsR0FBRztRQUNiLFlBQVk7UUFDWixZQUFZO1FBQ1osVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEdBQUcscUNBQXFDO1FBQy9FLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFp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