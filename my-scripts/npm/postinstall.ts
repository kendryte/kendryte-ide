import { readdirSync } from 'fs';
import { normalize, resolve } from 'path';
import { isWin, VSCODE_ROOT } from '../build-env/misc/constants';
import { lstat, readFile, writeFile } from '../build-env/misc/fsUtil';
import { resolveGitDir } from '../build-env/misc/git';
import { runMain } from '../build-env/misc/myBuildSystem';

const installedMark = '## kendryte environment hook ## Do Not Edit This File';
const installedMarkEnd = '## kendryte environment hook end ## Do Not Edit This File';
const passingSimpleEnvironments = [
	'HTTPS_PROXY',
	'ALL_PROXY',
	'npm_config_arch',
	'npm_config_disturl',
	'npm_config_runtime',
	'ORIGINAL_HOME',
	'ORIGINAL_PATH',
].map(exportSimpleEnvironment);
const passingPathEnvironments = [
	'VSCODE_ROOT',
	'RELEASE_ROOT',
	'ARCH_RELEASE_ROOT',
	'FAKE_HOME',
	'HOME',
	'NODEJS_INSTALL',
	'NODEJS_BIN',
	'NODEJS',
	'YARN_FOLDER',
	'PREFIX',
	'YARN_CACHE_FOLDER',
	'PRIVATE_BINS',
	'TMP',
	'TEMP',
	'npm_config_cache',
].map(isWin? exportCrossPlatformEnvironment : exportSimpleEnvironment);
let passingPath: string[];
if (isWin) {
	const mergingPath = process.env.Path;
	const npmContent = `#!/bin/sh
"$NODEJS" "$VSCODE_ROOT/my-scripts/build-env/mock-npm.js"
`.trim();
	passingPath = [
		'unset path',
		'unset Path',
		'echo -e ' + JSON.stringify(npmContent) + ' \\"\\$@\\" > "${PRIVATE_BINS}/npm"',
		'export PATH=' + JSON.stringify(parsePathVariable(mergingPath) + ':$PATH'),
	];
} else {
	passingPath = [exportSimpleEnvironment('PATH')];
}
runMain(async () => {
	if (!process.env.BUILDING) {
		const gitDir = await resolveGitDir(resolve(VSCODE_ROOT, '.git'));
		const hooksDir = resolve(gitDir, 'hooks');
		const ls = await lstat(hooksDir);
		if (!ls || !ls.isDirectory()) {
			throw new Error('git hooks dir does not exists: ' + hooksDir + '\n   run `node node_modules/husky/bin/install.js` first.\n');
		}
		for (const item of readdirSync(hooksDir)) {
			await parseHookItem(resolve(hooksDir, item));
		}
	}
});

async function parseHookItem(file: string) {
	if (file.endsWith('.sample')) {
		return;
	}
	
	const data = await readFile(file);
	const lines = data.split('\n');
	
	const startMark = lines.indexOf(installedMark);
	const endMark = lines.lastIndexOf(installedMarkEnd);
	
	let start = 1, length = 0;
	if (startMark !== -1 && endMark > startMark) {
		start = startMark;
		length = endMark - startMark + 1;
	}
	
	lines.splice(start, length,
		installedMark,
		...passingSimpleEnvironments,
		...passingPathEnvironments,
		...passingPath,
		installedMarkEnd,
	);
	
	await writeFile(file, lines.join('\n'));
}

function exportSimpleEnvironment(envName: string) {
	return `export ${envName}=${JSON.stringify(process.env[envName])}`;
}

function exportCrossPlatformEnvironment(envName: string) {
	const paths = parsePathVariable(process.env[envName]);
	
	return `export ${envName}=${JSON.stringify(paths)}`;
}

function parsePathVariable(value: string) {
	return value.split(';').filter(e => e.length > 0).map((path) => {
		path = normalize(path);
		path = path.replace(/^([a-z]):\\/i, (m0, drive) => {
			return '/' + drive.toLowerCase() + '/';
		});
		path = path.replace(/\\/g, '/');
		return path;
	}).join(':');
}