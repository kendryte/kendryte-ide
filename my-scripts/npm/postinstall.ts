import { readdirSync, readFileSync, writeFileSync } from 'fs';
import { normalize, resolve } from 'path';
import { isWin, VSCODE_ROOT } from '../build-env/misc/constants';

const installedMark = '## kendryte environment hook ## Do Not Edit This File';
const installedMarkEnd = '## kendryte environment hook end ## Do Not Edit This File';
const passingSimpleEnvironments = [
	'HTTPS_PROXY',
	'ALL_PROXY',
	'npm_config_arch',
	'npm_config_disturl',
	'npm_config_runtime',
	'ORIGINAL_HOME',
	'ORIGINAL_PATH',
].map(exportSimpleEnvironment);
const passingPathEnvironments = [
	'VSCODE_ROOT',
	'RELEASE_ROOT',
	'ARCH_RELEASE_ROOT',
	'FAKE_HOME',
	'HOME',
	'NODEJS_INSTALL',
	'NODEJS_BIN',
	'NODEJS',
	'YARN_FOLDER',
	'PREFIX',
	'YARN_CACHE_FOLDER',
	'PRIVATE_BINS',
	'PATH',
	'TMP',
	'TEMP',
	'npm_config_cache',
].map(isWin? exportCrossPlatformEnvironment : exportSimpleEnvironment);

function exportSimpleEnvironment(envName: string) {
	return `export ${envName}=${JSON.stringify(process.env[envName])}`;
}

function exportCrossPlatformEnvironment(envName: string) {
	const paths = process.env[envName].split(';').map((path) => {
		path = normalize(path);
		path = path.replace(/^([a-z]):\\/i, (m0, drive) => {
			return '/' + drive.toLowerCase() + '/';
		});
		path = path.replace(/\\/g, '/');
		return path;
	});
	
	return `export ${envName}=${JSON.stringify(paths.join(':'))}`;
}

const hooksDir = resolve(VSCODE_ROOT, '.git', 'hooks');
process.chdir(hooksDir);
readdirSync(hooksDir).forEach((item: string) => {
	if (item.endsWith('.sample')) {
		return;
	}
	
	const data = readFileSync(resolve(hooksDir, item), 'utf8');
	const lines = data.split('\n');
	
	const startMark = lines.indexOf(installedMark);
	const endMark = lines.lastIndexOf(installedMarkEnd);
	
	let start = 1, length = 0;
	if (startMark !== -1 && endMark > startMark) {
		start = startMark;
		length = endMark - startMark + 1;
	}
	
	lines.splice(start, length,
		installedMark,
		...passingSimpleEnvironments,
		...passingPathEnvironments,
		installedMarkEnd,
	);
	
	writeFileSync(item, lines.join('\n'), 'utf8');
});