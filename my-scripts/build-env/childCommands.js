"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const path_1 = require("path");
const stream_1 = require("stream");
const include_1 = require("./include");
function ThrowStatusCodeError(status, signal) {
    const e = StatusCodeError(status, signal);
    if (e) {
        throw e;
    }
    return;
}
function chdir(d) {
    d = path_1.normalize(d);
    process.chdir(d);
    console.log('\n > %s', process.cwd());
}
exports.chdir = chdir;
function StatusCodeError(status, signal) {
    if (status === 0 && !signal) {
        return null;
    }
    return new Error(signal ? `Program exit by signal "${signal}"` : `Program exit with code "${status}"`);
}
function parseCommand(cmd, args) {
    if (include_1.isWin) {
        return ['powershell.exe', ['-Command', cmd, ...args]];
    }
    else {
        return [cmd, args];
    }
}
function shellSync(stdio, cmd, args) {
    const r = child_process_1.spawnSync(cmd, args, {
        stdio,
        encoding: 'utf8',
    });
    if (r.error) {
        throw r.error;
    }
    ThrowStatusCodeError(r.status, r.signal);
    return r;
}
function shellExec(cmd, ...args) {
    [cmd, args] = parseCommand(cmd, args);
    console.log(' + %s %s | pipe-output', cmd, args.join(' '));
    shellSync('inherit', cmd, args);
}
exports.shellExec = shellExec;
function shellMute(cmd, ...args) {
    [cmd, args] = parseCommand(cmd, args);
    console.log(' + %s %s | mute-output', cmd, args.join(' '));
    shellSync(['ignore', 'ignore', 'inherit'], cmd, args);
}
exports.shellMute = shellMute;
function shellOutput(cmd, ...args) {
    [cmd, args] = parseCommand(cmd, args);
    console.log(' + %s %s | read-output', cmd, args.join(' '));
    const r = shellSync(['ignore', 'pipe', 'inherit'], cmd, args);
    return r.stdout;
}
exports.shellOutput = shellOutput;
async function pipeCommandOut(pipe, cmd, ...args) {
    [cmd, args] = parseCommand(cmd, args);
    console.log(' + %s %s | line-output', cmd, args.join(' '));
    const cp = child_process_1.spawn(cmd, args, {
        stdio: ['ignore', 'pipe', 'inherit'],
    });
    cp.stdout.pipe(pipe, { end: false });
    await promiseProcess(cp);
}
exports.pipeCommandOut = pipeCommandOut;
class PassThru extends stream_1.Transform {
    _transform(chunk, encoding, callback) {
        this.push(chunk, encoding);
        callback();
    }
}
function outputCommand(cmd, ...args) {
    [cmd, args] = parseCommand(cmd, args);
    console.log(' + %s %s | stream-output', cmd, args.join(' '));
    const output = new PassThru();
    return {
        output,
        wait() {
            const cp = child_process_1.spawn(cmd, args, {
                stdio: ['ignore', output, output],
            });
            return promiseProcess(cp);
        },
    };
}
exports.outputCommand = outputCommand;
function promiseProcess(cp) {
    return new Promise((resolve, reject) => {
        cp.once('error', reject);
        cp.once('exit', (code, signal) => {
            const e = StatusCodeError(code, signal);
            if (e) {
                reject(e);
            }
            else {
                resolve();
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpbGRDb21tYW5kcy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsiYnVpbGQtZW52L2NoaWxkQ29tbWFuZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBNkU7QUFDN0UsK0JBQWlDO0FBQ2pDLG1DQUF1RDtBQUN2RCx1Q0FBa0M7QUFFbEMsU0FBUyxvQkFBb0IsQ0FBQyxNQUFjLEVBQUUsTUFBYztJQUMzRCxNQUFNLENBQUMsR0FBRyxlQUFlLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFDLElBQUksQ0FBQyxFQUFFO1FBQ04sTUFBTSxDQUFDLENBQUM7S0FDUjtJQUNELE9BQU87QUFDUixDQUFDO0FBRUQsU0FBZ0IsS0FBSyxDQUFDLENBQVM7SUFDOUIsQ0FBQyxHQUFHLGdCQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakIsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBSkQsc0JBSUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxNQUFjLEVBQUUsTUFBYztJQUN0RCxJQUFJLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDNUIsT0FBTyxJQUFJLENBQUM7S0FDWjtJQUNELE9BQU8sSUFBSSxLQUFLLENBQ2YsTUFBTSxDQUFBLENBQUMsQ0FBQywyQkFBMkIsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLDJCQUEyQixNQUFNLEdBQUcsQ0FDbkYsQ0FBQztBQUNILENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxHQUFXLEVBQUUsSUFBYztJQUNoRCxJQUFJLGVBQUssRUFBRTtRQUNWLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQ3REO1NBQU07UUFD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