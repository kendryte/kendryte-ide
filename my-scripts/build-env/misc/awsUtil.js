"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = require("aws-sdk");
const fs_1 = require("fs");
const util_1 = require("util");
const fsUtil_1 = require("./fsUtil");
const globalOutput_1 = require("./globalOutput");
const hashUtil_1 = require("./hashUtil");
const streamUtil_1 = require("./streamUtil");
const { loadCredentialsFromEnv, loadCredentialsFromIniFile, loadRegionFromEnv, loadRegionFromIniFile } = require('awscred');
require('awscred').credentialsCallChain = [loadCredentialsFromEnv, loadCredentialsFromIniFile];
require('awscred').regionCallChain = [loadRegionFromEnv, loadRegionFromIniFile];
const loadCredentialsAndRegion = util_1.promisify(require('awscred').loadCredentialsAndRegion);
exports.OBJKEY_IDE_JSON = 'release/IDE.json';
exports.OBJKEY_DOWNLOAD_INDEX = 'release/download/index.html';
let s3;
function getDefaultBucket() {
    return fsUtil_1.getProductData().applicationName;
}
exports.getDefaultBucket = getDefaultBucket;
function bucketUrl(Key, Bucket = getDefaultBucket()) {
    return `http://s3.${s3.config.region}.amazonaws.com.cn/${Bucket}/${Key}`;
}
exports.bucketUrl = bucketUrl;
async function loadCred(output, home) {
    output.writeln('try load aws key from ' + home);
    const saveHome = process.env.HOME;
    process.env.HOME = home;
    const p = loadCredentialsAndRegion();
    process.env.HOME = saveHome;
    return p.then((cfg) => {
        if (cfg) {
            output.success('success load config from ' + home);
        }
        return cfg;
    }, () => {
        output.writeln('not able to load.');
        return null;
    });
}
async function initS3(output) {
    if (s3) {
        return;
    }
    const awsConfig = await loadCred(output, process.env.HOME) || await loadCred(output, process.env.ORIGINAL_HOME);
    if (!awsConfig) {
        throw new Error('Not able to load AWS config. see https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html');
    }
    s3 = new aws_sdk_1.S3({
        ...awsConfig,
        logger: {
            write: output.write.bind(output),
            log(...messages) {
                output.writeln(util_1.format(...messages));
            },
        },
    });
}
exports.initS3 = initS3;
function getS3() {
    return s3;
}
exports.getS3 = getS3;
function s3LoadText(Key, Bucket = getDefaultBucket()) {
    globalOutput_1.globalLog('[S3] getText -> %s :: %s', Bucket, Key);
    return s3.getObject({ Bucket, Key })
        .createReadStream()
        .pipe(new streamUtil_1.CollectingStream(), { end: true })
        .promise();
}
exports.s3LoadText = s3LoadText;
async function s3LoadJson(Key, Bucket = getDefaultBucket()) {
    globalOutput_1.globalLog('[S3] getJson -> %s :: %s', Bucket, Key);
    const json = await s3.getObject({ Bucket, Key })
        .createReadStream()
        .pipe(new streamUtil_1.CollectingStream(), { end: true })
        .promise();
    return JSON.parse(json);
}
exports.s3LoadJson = s3LoadJson;
async function s3UploadBuffer(data, Key, Bucket = getDefaultBucket()) {
    globalOutput_1.globalLog('[S3] upload -> %s :: %s', Bucket, Key);
    await new Promise((resolve, reject) => {
        s3.upload({ ACL: 'public-read', Bucket, Key, Body: data.stream, ContentType: data.mime }, { partSize: 10 * 1024 * 1024, queueSize: 4 }, (err, data) => err ? reject(err) : resolve(data.Location));
    });
}
exports.s3UploadBuffer = s3UploadBuffer;
async function s3UploadFile(output, Key, data, Bucket = getDefaultBucket()) {
    const md5 = await hashUtil_1.hashStream(fs_1.createReadStream(data.stream));
    await s3UploadBuffer({
        stream: Buffer.from(md5),
        mime: 'text/plain',
    }, Key + '.md5');
    await s3UploadStream(output, {
        stream: fs_1.createReadStream(data.stream),
        mime: data.mime,
    }, Key);
}
exports.s3UploadFile = s3UploadFile;
async function s3UploadStream(output, data, Key, Bucket = getDefaultBucket()) {
    globalOutput_1.globalLog('[S3] upload -> %s :: %s', Bucket, Key);
    await new Promise((resolve, reject) => {
        const mup = s3.upload({ ACL: 'public-read', Bucket, Key, Body: data.stream, ContentType: data.mime }, { partSize: 10 * 1024 * 1024, queueSize: 4 }, (err, data) => err ? reject(err) : resolve(data.Location));
        mup.on('httpUploadProgress', ({ loaded, total }) => {
            output.screen.writeln(`${loaded} / ${total}`);
        });
    });
}
exports.s3UploadStream = s3UploadStream;
function s3DownloadStream(Key, Bucket = getDefaultBucket()) {
    globalOutput_1.globalLog('[S3] download <- %s :: %s', Bucket, Key);
    return s3.getObject({ Bucket, Key }).createReadStream();
}
exports.s3DownloadStream = s3DownloadStream;
function calcReleaseFileAwsKey(platform, type) {
    const product = fsUtil_1.getProductData();
    const packageJson = fsUtil_1.getPackageData();
    const pv = ('' + packageJson.patchVersion).replace(/\./g, '');
    return `release/download/${product.quality}/v${packageJson.version}/${platform}.${pv}.${type}`;
}
exports.calcReleaseFileAwsKey = calcReleaseFileAwsKey;
function calcPackageAwsKey(platform, type) {
    const product = fsUtil_1.getProductData();
    return `release/download/${product.quality}/${platform}.offlinepackages.${type}`;
}
exports.calcPackageAwsKey = calcPackageAwsKey;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzVXRpbC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsiYnVpbGQtZW52L21pc2MvYXdzVXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHFDQUE2QjtBQUU3QiwyQkFBc0M7QUFDdEMsK0JBQXlDO0FBQ3pDLHFDQUEwRDtBQUMxRCxpREFBMkM7QUFDM0MseUNBQXdDO0FBQ3hDLDZDQUFnRDtBQUVoRCxNQUFNLEVBQUMsc0JBQXNCLEVBQUUsMEJBQTBCLEVBQUUsaUJBQWlCLEVBQUUscUJBQXFCLEVBQUMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDMUgsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLG9CQUFvQixHQUFHLENBQUMsc0JBQXNCLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztBQUMvRixPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsZUFBZSxHQUFHLENBQUMsaUJBQWlCLEVBQUUscUJBQXFCLENBQUMsQ0FBQztBQUNoRixNQUFNLHdCQUF3QixHQUFHLGdCQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFFM0UsUUFBQSxlQUFlLEdBQUcsa0JBQWtCLENBQUM7QUFDckMsUUFBQSxxQkFBcUIsR0FBRyw2QkFBNkIsQ0FBQztBQUVuRSxJQUFJLEVBQU0sQ0FBQztBQUVYLFNBQWdCLGdCQUFnQjtJQUMvQixPQUFPLHVCQUFjLEVBQUUsQ0FBQyxlQUFlLENBQUM7QUFDekMsQ0FBQztBQUZELDRDQUVDO0FBRUQsU0FBZ0IsU0FBUyxDQUFDLEdBQVcsRUFBRSxTQUFpQixnQkFBZ0IsRUFBRTtJQUN6RSxPQUFPLGFBQWEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixNQUFNLElBQUksR0FBRyxFQUFFLENBQUM7QUFDMUUsQ0FBQztBQUZELDhCQUVDO0FBRUQsS0FBSyxVQUFVLFFBQVEsQ0FBQyxNQUEyQixFQUFFLElBQVk7SUFDaEUsTUFBTSxDQUFDLE9BQU8s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