"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const include_1 = require("./include");
process.stdin.on('end', (f) => {
    console.log('# end');
    process.stderr.end(f, () => {
        process.exit(0);
    });
});
const MAX_LINE = 1024;
let CurrentColumn = include_1.winSize() || 42;
let cursor = 0;
let lineBuffer = Buffer.alloc(MAX_LINE, ' ');
let currentDataPos = 0;
function resizeHandler(why) {
    CurrentColumn = include_1.winSize() || 42;
    console.log('# ' + why + ' -> ', CurrentColumn);
    clearLine();
    print(lineBuffer);
}
function appendCurrentLine(data) {
    if (currentDataPos >= MAX_LINE) {
        return;
    }
    cursor += data.copy(lineBuffer, currentDataPos);
    print(data);
}
function print(data) {
    const newCursor = cursor + data.length;
    if (newCursor >= CurrentColumn - 4) {
        process.stderr.write(data.slice(0, CurrentColumn - 4 - cursor));
        process.stderr.write('...');
        cursor = CurrentColumn;
    }
    else {
        process.stderr.write(data);
        cursor = newCursor;
    }
}
function clearLine() {
    cursor = 0;
    process.stderr.write('\r\x1BK');
}
function flushLine() {
    lineBuffer.fill(' ');
    currentDataPos = 0;
    clearLine();
}
const nl = Buffer.from('\n');
process.stdin.on('data', (data) => {
    process.stderr.write(data);
    const lastLine = data.lastIndexOf(nl);
    if (lastLine === -1) {
        return appendCurrentLine(data);
    }
    else {
        flushLine();
        return appendCurrentLine(data);
    }
});
console.log('# size -> ', CurrentColumn);
process.on('SIGWINCH', () => resizeHandler('SIGWINCH'));
process.stderr.on('resize', () => resizeHandler('stderr.resize'));
process.stdout.on('resize', () => resizeHandler('stdout.resize'));
process.stdin.pipe(process.stdout);
process.on('exit', clearLine);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhdHVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQW9DO0FBRXBDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRTtRQUMxQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pCLENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDdEIsSUFBSSxhQUFhLEdBQUcsaUJBQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUNwQyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFFZixJQUFJLFVBQVUsR0FBVyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNyRCxJQUFJLGNBQWMsR0FBRyxDQUFDLENBQUM7QUFFdkIsU0FBUyxhQUFhLENBQUMsR0FBVztJQUNqQyxhQUFhLEdBQUcsaUJBQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ2hELFNBQVMsRUFBRSxDQUFDO0lBQ1osS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ25CLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFDLElBQVk7SUFDdEMsSUFBSSxjQUFjLElBQUksUUFBUSxFQUFFO1FBQy9CLE9BQU87S0FDUDtJQUNELE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNoRCxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDYixDQUFDO0FBRUQsU0FBUyxLQUFLLENBQUMsSUFBWTtJQUMxQixNQUFNLFNBQVMsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QyxJQUFJLFNBQVMsSUFBSSxhQUFhLEdBQUcsQ0FBQyxFQUFFO1FBQ25DLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLGFBQWEsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNoRSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QixNQUFNLEdBQUcsYUFBYSxDQUFDO0tBQ3ZCO1NBQU07UUFDTixPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQixNQUFNLEdBQUcsU0FBUyxDQUFDO0tBQ25CO0FBQ0YsQ0FBQztBQUVELFNBQVMsU0FBUztJQUNqQixNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUVELFNBQVMsU0FBUztJQUNqQixVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JCLGNBQWMsR0FBRyxDQUFDLENBQUM7SUFDbkIsU0FBUyxFQUFFLENBQUM7QUFDYixDQUFDO0FBRUQsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QixPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFZLEVBQUUsRUFBRTtJQUN6QyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLElBQUksUUFBUSxLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQ3BCLE9BQU8saUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDL0I7U0FBTTtRQUNOLFNBQVMsRUFBRSxDQUFDO1FBQ1osT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUMvQjtBQUNGLENBQUMsQ0FBQyxDQUFDO0FBRUgsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFFekMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDeEQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0FBQ2xFLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztBQUVsRSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFbkMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMifQ==